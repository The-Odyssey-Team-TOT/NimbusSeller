<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FigurineHaven</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background-image: url('https://www.solarsystemscope.com/textures/download/8k_stars.jpg');
      background-size: cover;
      background-repeat: no-repeat;
      background-attachment: fixed;
      background-position: center;
    }

    .buttonRounded {
        border-radius:50rem !important;
    }

    .content {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      color: white;
      z-index: 10;
      -webkit-user-select: none; /* Safari */
      -ms-user-select: none; /* IE 10 and IE 11 */
      user-select: none; /* Standard syntax */
    }

    #globeCanvas {
      position: absolute;
      left: 12%;
      top: 0;
      width: 200%;
      height: 200%;
      z-index: 1;
    }

    .dark .content {
      color: white;
    }

    .dark .bg-blue-600 {
      background-color: #2563eb;
    }

    .dark .bg-blue-600:hover {
      background-color: #1d4ed8;
    }

    .dark .bg-green-600 {
      background-color: #16a34a;
    }

    .dark .bg-green-600:hover {
      background-color: #15803d;
    }

    .dark-toggle {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background-color: #3f3f3f;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      cursor: pointer;
      z-index: 20;
    }

    .textdecooff{
        text-decoration:none;
    }
  </style>
</head>
<%# <body id="GlobeCanvas" data-controller="globe"> %>
  <div class="content">
    <h1 class="text-6xl font-bold mb-4">FigurineHaven</h1>
    <p class="text-xl mb-8">The best StarWars Mersh</p>
    <div class="space-x-4">
      <a href="/users/sign_up" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 textdecooff buttonRounded">Sign up</a>
      <a href="/users/sign_in" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-green-700 textdecooff buttonRounded">Log in</a>
    </div>
  </div>

  <script type="module">
    import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus@3.1.0/dist/stimulus.js";
    import * as THREE from "https://unpkg.com/three@0.139.0/build/three.module.js";

    class GlobeController extends Controller {
      connect() {
        this.initGlobe();
      }

      initGlobe() {
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(67, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ alpha: true });

        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        renderer.domElement.id = "globeCanvas";

        const textureLoader = new THREE.TextureLoader();
        const texture1 = textureLoader.load('<%= asset_path("Coruscant1.png") %>');
        const texture2 = textureLoader.load('<%= asset_path("Coruscant.png") %>');
        const texture3 = textureLoader.load('<%= asset_path("Coruscant2.png") %>');
        const texture4 = textureLoader.load('<%= asset_path("Coruscant3.png") %>');

        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);

        // Custom Shader Material for Multiple Textures
        const sphereMaterial = new THREE.ShaderMaterial({
          uniforms: {
            texture1: { type: 't', value: texture1 },
            texture2: { type: 't', value: texture2 },
            texture3: { type: 't', value: texture3 },
            texture4: { type: 't', value: texture4 },
          },
          vertexShader: `
            varying vec2 vUv;
            void main() {
              vUv = uv;
              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
          `,
          fragmentShader: `
            uniform sampler2D texture1;
            uniform sampler2D texture2;
            varying vec2 vUv;
            void main() {
              vec4 tex1 = texture2D(texture1, vUv);
              vec4 tex2 = texture2D(texture2, vUv);
              gl_FragColor = mix(tex1, tex2, 0.5); // Mix textures with equal weight
            }
          `
        });

        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
        scene.add(sphere);

        const light = new THREE.PointLight(0xffffff, 1, 100);
        light.position.set(10, 10, 10);
        scene.add(light);

        camera.position.z = 3;

        const animate = () => {
          requestAnimationFrame(animate);
          sphere.rotation.x += 0.0000;
          sphere.rotation.y += 0.0006;
          renderer.render(scene, camera);
        };

        animate();

        window.addEventListener('resize', () => {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
        });
      }
    }

    const application = Application.start();
    application.register("globe", GlobeController);
  </script>
</body>
</html>
